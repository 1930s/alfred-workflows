<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.vitorgalvao.alfred.strongpassword</string>
	<key>connections</key>
	<dict>
		<key>833B9AF0-2223-4218-84F4-75B180E64183</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>FF316160-82F1-4AC1-8D82-72A1F0AC9ED6</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>FF316160-82F1-4AC1-8D82-72A1F0AC9ED6</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B6957E33-7C7E-448D-B628-CE1CB76322A7</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Get a strong password by leveraging multiple sources</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>StrongPassword</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>readonly local_file='info.plist'
readonly remote_file="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/source/info.plist"
readonly workflow_url="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/${alfred_workflow_name}.alfredworkflow"
readonly workflow_type='workflow'
frequency_check='15'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED UNLESS YOU KNOW WHAT YOU ARE DOING
function abort {
  echo "${1}" 1&gt;&amp;2
  exit 1
}

function url_exists {
  if curl --silent --location --output /dev/null --fail --range 0-0 "${1}"; then
    return 0
  else
    return 1
  fi
}

function notification {
  local readonly terminal_notifier="$(find . -name terminal-notifier.app)"

  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}"/Contents/MacOS/terminal-notifier -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
  else
    osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
  fi
}

# Local sanity checks
[[ ! -f "${local_file}" ]] &amp;&amp; abort "'local_file' ("${local_file}") appears to not point to an existing file."
[[ ! "${workflow_type}" =~ ^(workflow|page)$ ]] &amp;&amp; abort "'workflow_type' ("${workflow_type}") needs to be one of 'workflow' or 'page'."
[[ ! "${frequency_check}" =~ ^[0-9]+$ ]] &amp;&amp; abort "'frequency_check' ("${frequency_check}") appears to not be a number."

# Check for updates
if [[ $(find "${local_file}" -mtime +"${frequency_check}") ]]; then
  if ! url_exists "${remote_file}"; then abort "'remote_file' ("${remote_file}") appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_file}"

  if [[ "$(diff "${local_file}" "${tmp_file}")" ]]; then
    if [[ "${workflow_type}" == 'page' ]]; then
      notification 'Opening download page…'
      open "${workflow_url}"
    else
      if url_exists "${workflow_url}"; then
        notification 'Downloading and installing…'
        curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${workflow_url}"
        open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
      else
        abort "'workflow_url' ("${workflow_url}") appears to not be reachable."
      fi # url_exists
    fi # workflow_type
  else
    touch "${local_file}" # Reset timer by touching local file
  fi # diff
fi #find</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>B6957E33-7C7E-448D-B628-CE1CB76322A7</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>sp</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Please wait…</string>
				<key>script</key>
				<string>cat &lt;&lt; EOF
&lt;?xml version='1.0'?&gt;&lt;items&gt;
  &lt;item uid='sp' arg='yes {query}' valid='yes'&gt;
    &lt;title&gt;StrongPassword&lt;/title&gt;
    &lt;subtitle&gt;Get a strong password (optional maximum number of characters up to 64)&lt;/subtitle&gt;
    &lt;icon&gt;icon.png&lt;/icon&gt;
  &lt;/item&gt;
  &lt;item uid='spns' arg='no {query}' valid='yes'&gt;
    &lt;title&gt;StrongPassword (no special characters)&lt;/title&gt;
    &lt;subtitle&gt;Get a strong password without special characters (optional maximum number of characters up to 64)&lt;/subtitle&gt;
    &lt;icon&gt;icon.png&lt;/icon&gt;
  &lt;/item&gt;
&lt;/items&gt;
EOF</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Get a strong password (with optional maximum number of characters)</string>
				<key>title</key>
				<string>StrongPassword</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>833B9AF0-2223-4218-84F4-75B180E64183</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>notification() {
  ./_licensed/terminal-notifier/terminal-notifier.app/Contents/MacOS/terminal-notifier -title "${alfred_workflow_name}" -message "${1}"
}

IFS=' ' read special number &lt;&lt;&lt; '{query}'

[[ -z "${number}" ]] || [[ "${number}" -gt 64 ]] &amp;&amp; number='64'

ruby getPassword.rb "${special}" "${number}" | pbcopy

notification "Password copied to the clipboard (${number} characters)"</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>FF316160-82F1-4AC1-8D82-72A1F0AC9ED6</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Get strong passwords by combining up to three sources — https://www.grc.com/passwords.htm (unless you choose to have a password without special characters), http://www.random.org/passwords/, and `ruby` itself. There’s at the end a technical explanation on how it works.
 
Call `sp` and the workflow will get a (default and maximum of) 64 characters random password, and copy it to your clipboard.

![](http://i.imgur.com/P9pteQG.png)
![](http://i.imgur.com/JHl3Urg.png)&lt;br&gt;
 
You can also specify a number after the keyword, and it’ll truncate the password to that.

![](http://i.imgur.com/xIHKYKv.png)

#### Technical Details
I strived to keep the code very readable; inspect it at will. What this does is get a (about, due to some HTML escaping) 63 characters password from https://www.grc.com/passwords.htm and another (8 passwords, each consisting of 24 characters, joined together) from http://www.random.org/passwords/. If you opt for a password without special characters, only the latter will be used. It then picks a pseudorandom number (one of the instances where `ruby` is used, for speed) between one and two thirds of your chosen password length (truncated at, and by default, 64), saving that number (lets call it “x”) and the remainder (lets call it “y”) separately. From the first password, x number of characters will be chosen from random positions on the string (it’s actually an array, but that may start to become a bit too technical), and from the second one, y characters will be picked. The results are then joined together, and shuffled a last time between them, to produce the final result.</string>
	<key>uidata</key>
	<dict>
		<key>833B9AF0-2223-4218-84F4-75B180E64183</key>
		<dict>
			<key>xpos</key>
			<integer>110</integer>
			<key>ypos</key>
			<integer>10</integer>
		</dict>
		<key>B6957E33-7C7E-448D-B628-CE1CB76322A7</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<integer>500</integer>
			<key>ypos</key>
			<integer>10</integer>
		</dict>
		<key>FF316160-82F1-4AC1-8D82-72A1F0AC9ED6</key>
		<dict>
			<key>xpos</key>
			<integer>310</integer>
			<key>ypos</key>
			<integer>10</integer>
		</dict>
	</dict>
	<key>version</key>
	<string>1.0.1</string>
	<key>webaddress</key>
	<string>http://vitorgalvao.com/</string>
</dict>
</plist>
