<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.vitorgalvao.alfred.formatsize</string>
	<key>connections</key>
	<dict/>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Reference paper sizes and device viewport widths</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>FormatSize</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>paperiso</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Please wait…</string>
				<key>script</key>
				<string>IFS=$'\n'

file="sizes/iso.csv"

echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"
for media in $(grep -i "^{query}" "${file}"); do
	name="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\1/')"
	size="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\2 mm  |  \3 in/')"
	echo "&lt;item uid='${name}' valid='no' autocomplete='${name}'&gt;"
	echo "&lt;title&gt;${name}&lt;/title&gt;"
	echo "&lt;subtitle&gt;${size}&lt;/subtitle&gt;"
	echo "&lt;icon&gt;icon.png&lt;/icon&gt;"
	echo "&lt;/item&gt;"
done
echo "&lt;/items&gt;"</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>A, B, and C series</string>
				<key>title</key>
				<string>International standard (ISO 216) paper formats</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>785C12C1-537B-4D4D-AA2B-25D2C5D33231</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>paperna</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Please wait…</string>
				<key>script</key>
				<string>IFS=$'\n'

file="sizes/na.csv"

echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"
for media in $(grep -i "^{query}" "${file}"); do
	name="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\1/')"
	size="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\2 mm  |  \3 in/')"
	echo "&lt;item uid='${name}' valid='no' autocomplete='${name}'&gt;"
	echo "&lt;title&gt;${name}&lt;/title&gt;"
	echo "&lt;subtitle&gt;${size}&lt;/subtitle&gt;"
	echo "&lt;icon&gt;icon.png&lt;/icon&gt;"
	echo "&lt;/item&gt;"
done
echo "&lt;/items&gt;"</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Loose sizes</string>
				<key>title</key>
				<string>North American paper formats</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>BD54C221-BA04-4681-BD20-2A8FE610186F</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>paperjis</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Please wait…</string>
				<key>script</key>
				<string>IFS=$'\n'

file="sizes/jis.csv"

echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"
for media in $(grep -i "^{query}" "${file}"); do
	name="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\1/')"
	size="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\2 mm  |  \3 in/')"
	echo "&lt;item uid='${name}' valid='no' autocomplete='${name}'&gt;"
	echo "&lt;title&gt;${name}&lt;/title&gt;"
	echo "&lt;subtitle&gt;${size}&lt;/subtitle&gt;"
	echo "&lt;icon&gt;icon.png&lt;/icon&gt;"
	echo "&lt;/item&gt;"
done
echo "&lt;/items&gt;"</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>B series, Shiroku ban, Kiku</string>
				<key>title</key>
				<string>Japanese B-series variant paper formats</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>BD21EA10-41BC-4F6E-9688-FC115DD3E5FA</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>paperansi</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Please wait…</string>
				<key>script</key>
				<string>IFS=$'\n'

file="sizes/ansi.csv"

echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"
for media in $(grep -i "^{query}" "${file}"); do
	name="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\1/')"
	size="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\2 mm  |  \3 in/')"
	echo "&lt;item uid='${name}' valid='no' autocomplete='${name}'&gt;"
	echo "&lt;title&gt;${name}&lt;/title&gt;"
	echo "&lt;subtitle&gt;${size}&lt;/subtitle&gt;"
	echo "&lt;icon&gt;icon.png&lt;/icon&gt;"
	echo "&lt;/item&gt;"
done
echo "&lt;/items&gt;"</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>ANSI series</string>
				<key>title</key>
				<string>ANSI paper formats</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>18F65376-7567-4DB6-AE98-CA42FD18DB64</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>paperarch</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Please wait…</string>
				<key>script</key>
				<string>IFS=$'\n'

file="sizes/arch.csv"

echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"
for media in $(grep -i "^{query}" "${file}"); do
	name="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\1/')"
	size="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\)$/\2 mm  |  \3 in/')"
	echo "&lt;item uid='${name}' valid='no' autocomplete='${name}'&gt;"
	echo "&lt;title&gt;${name}&lt;/title&gt;"
	echo "&lt;subtitle&gt;${size}&lt;/subtitle&gt;"
	echo "&lt;icon&gt;icon.png&lt;/icon&gt;"
	echo "&lt;/item&gt;"
done
echo "&lt;/items&gt;"</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Arch series</string>
				<key>title</key>
				<string>Architectural paper formats</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>F25005BB-AA14-480E-B744-0131E97DFED3</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>viewport</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Please wait…</string>
				<key>script</key>
				<string>IFS=$'\n'

file="sizes/viewport.csv"

# update viewport.csv it's more than 30 days old
if [[ $(find "${file}" -mtime +30) ]]; then
  curl "http://viewportsizes.com/devices.csv" | cut -d , -f1-2 -f4-5 | tail +2 &gt; "${file}"
fi

echo "&lt;?xml version='1.0'?&gt;&lt;items&gt;"
for media in $(grep -i ".*{query}.*" "${file}"); do
	name="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\),\(.*\)$/\1 · \2/')"
	size="$(echo ${media} | sed 's/^\(.*\),\(.*\),\(.*\),\(.*\)$/\3 x \4 (Portrait width x Landscape width)/')"
	echo "&lt;item uid='${name}' valid='no' autocomplete='${name}'&gt;"
	echo "&lt;title&gt;${name}&lt;/title&gt;"
	echo "&lt;subtitle&gt;${size}&lt;/subtitle&gt;"
	echo "&lt;icon&gt;icon.png&lt;/icon&gt;"
	echo "&lt;/item&gt;"
done
echo "&lt;/items&gt;"</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Search by device name, brand, OS, or viewport width</string>
				<key>title</key>
				<string>Viewport sizes for various mobile devices</string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>AB9CA804-7253-4FC6-997B-D7EDCCEED678</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>viewport</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>readonly remote_info_plist="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/source/info.plist"
readonly workflow_url="https://raw.githubusercontent.com/vitorgalvao/alfred-workflows/master/${alfred_workflow_name}/${alfred_workflow_name}.alfredworkflow"
readonly workflow_type='workflow'
readonly frequency_check='15'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED UNLESS YOU KNOW WHAT YOU ARE DOING
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  local readonly terminal_notifier="$(find . -name terminal-notifier.app)"

  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}"/Contents/MacOS/terminal-notifier -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
  else
    osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
  fi
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${workflow_type}" =~ ^(workflow|page)$ ]] || abort "'workflow_type' (${workflow_type}) needs to be one of 'workflow' or 'page'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" != "${remote_version}" ]]; then
    if [[ "${workflow_type}" == 'page' ]]; then
      notification 'Opening download page…'
      open "${workflow_url}"
    else
      if url_exists "${workflow_url}"; then
        notification 'Downloading and installing…'
        curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${workflow_url}"
        open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
      else
        abort "'workflow_url' (${workflow_url}) appears to not be reachable."
      fi # url_exists
    fi # workflow_type
  else
    touch "${local_info_plist}" # Reset timer by touching local file
  fi # diff
fi #find</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>0CBEE649-4351-42AB-9198-B4227B5A13F3</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Quick reference for different standard paper formats and viewport sizes of different devices.

For paper sizes, type `paper`, and you’ll see the available standards; all of them have different shortcuts which you can narrow down by starting to type the name of the format you want (so typing `paperiso b3` will only show you the B3 size of the ISO 126 standard).

For viewport sizes, type `viewport`, and you’ll see the available devices. You can narrow them down by device name, brand, OS, and even viewport width (in case you want to find similar ones).

![](https://i.imgur.com/ITaV1or.gif)

Paper sizes taken from [wikipedia](https://en.wikipedia.org/wiki/Paper_sizes) and viewport sizes from [viewportsizes.com](http://viewportsizes.com/).</string>
	<key>uidata</key>
	<dict>
		<key>0CBEE649-4351-42AB-9198-B4227B5A13F3</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<integer>450</integer>
			<key>ypos</key>
			<integer>610</integer>
		</dict>
		<key>18F65376-7567-4DB6-AE98-CA42FD18DB64</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>370</real>
		</dict>
		<key>785C12C1-537B-4D4D-AA2B-25D2C5D33231</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>AB9CA804-7253-4FC6-997B-D7EDCCEED678</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>610</real>
		</dict>
		<key>BD21EA10-41BC-4F6E-9688-FC115DD3E5FA</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>250</real>
		</dict>
		<key>BD54C221-BA04-4681-BD20-2A8FE610186F</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>F25005BB-AA14-480E-B744-0131E97DFED3</key>
		<dict>
			<key>xpos</key>
			<integer>300</integer>
			<key>ypos</key>
			<real>490</real>
		</dict>
	</dict>
	<key>version</key>
	<string>1.4.1</string>
	<key>webaddress</key>
	<string>http://vitorgalvao.com/</string>
</dict>
</plist>
